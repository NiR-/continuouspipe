<?xml version="1.0" ?>

<container xmlns="http://symfony.com/schema/dic/services"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <service id="app.team_creator" class="ContinuousPipe\Authenticator\Team\TeamCreator">
            <argument type="service" id="app.repository.team" />
            <argument type="service" id="app.repository.team_membership" />
            <argument type="service" id="event_dispatcher" />
        </service>

        <!-- Controllers -->
        <service id="api.controller.user" class="ApiBundle\Controller\UserController" />
        <service id="api.controller.credentials_bucket" class="ApiBundle\Controller\CredentialsBucketController">
            <argument type="service" id="app.repository.credentials_bucket" />
            <argument type="service" id="validator" />
        </service>
        <service id="api.controller.team" class="ApiBundle\Controller\TeamController">
            <argument type="service" id="app.repository.team" />
            <argument type="service" id="app.repository.team_membership" />
            <argument type="service" id="app.team_creator" />
            <argument type="service" id="validator" />
        </service>
        <service id="api.controller.invitation" class="ApiBundle\Controller\InvitationController">
            <argument type="service" id="validator" />
            <argument type="service" id="app.repository.user_invitation"/>
        </service>

        <!-- Authentication -->
        <service id="api.api_key_repository" class="ContinuousPipe\Authenticator\Security\InMemoryApiKeyRepository">
            <argument>%api_keys%</argument>
        </service>
        <service id="api.system_user_provider" class="ContinuousPipe\Authenticator\Security\Authentication\SystemUserProvider">
            <argument type="service" id="app.security.user_provider" />
            <argument type="service" id="api.api_key_repository" />
        </service>
        <service id="api.api_key_authenticator"
                 class="ContinuousPipe\Authenticator\Security\ApiKeyAuthenticator"
                 public="false" />

        <!-- Param Converter -->
        <service id="request.param_converter.team" class="ContinuousPipe\Security\Request\ParamConverter\TeamParamConverter">
            <argument type="service" id="app.repository.team" />

            <tag name="request.param_converter" converter="team" />
        </service>
        <service id="request.param_converter.bucket" class="ContinuousPipe\Security\Request\ParamConverter\BucketParamConverter">
            <argument type="service" id="app.repository.credentials_bucket" />

            <tag name="request.param_converter" converter="bucket" />
        </service>

        <!-- Security Voter -->
        <service id="security.access.team_voter"
                 class="ContinuousPipe\Security\Voter\TeamPermissionVoter"
                 public="false">
            <argument type="service" id="app.repository.team_membership" />
            <tag name="security.voter" />
        </service>
        <service id="security.access.bucket_voter"
                 class="ContinuousPipe\Security\Voter\BucketPermissionVoter"
                 public="false">
            <argument type="service" id="app.repository.team_membership" />
            <tag name="security.voter" />
        </service>
        <service id="security.access.user_voter"
                 class="ContinuousPipe\Security\Voter\UserPermissionVoter"
                 public="false">
            <tag name="security.voter" />
        </service>
        <service id="security.access.ghost_voter"
                 class="ContinuousPipe\Security\Voter\GhostUserPermissionVoter"
                 public="false">
            <tag name="security.voter" />
        </service>
        <service id="security.access.system_voter"
                 class="ContinuousPipe\Authenticator\Security\Voter\SystemUserPermissionVoter"
                 public="false">
            <tag name="security.voter" />
        </service>

        <!-- Event listeners -->
        <service id="app.listener.before_team_creation.create_credentials_bucket"
                 class="ContinuousPipe\Authenticator\EventListener\BeforeTeamCreation\CreateCredentialsBucket">
            <argument type="service" id="app.repository.credentials_bucket" />

            <tag name="kernel.event_subscriber"/>
        </service>
        <service id="app.listener.after_team_creation.copy_creator_credentials"
                 class="ContinuousPipe\Authenticator\EventListener\AfterTeamCreation\CopyCreatorCredentials">
            <argument type="service" id="app.repository.credentials_bucket" />

            <tag name="kernel.event_subscriber"/>
        </service>
        <service id="app.listener.jwt_token_created.add_user_email" class="ContinuousPipe\Authenticator\EventListener\JWTTokenCreated\AddUserEmailInToken">
            <tag name="kernel.event_listener" event="lexik_jwt_authentication.on_jwt_created" method="onJWTCreated" />
        </service>
        <service id="app.listener.serializer.obfuscate_credentials" class="ContinuousPipe\Authenticator\Obfuscate\Serializer\ObfuscateCredentialsSubscriber">
            <argument type="service" id="security.token_storage"/>

            <tag name="jms_serializer.event_subscriber" />
        </service>

        <!-- Validation -->
        <service id="app.validator.unique_team" class="ApiBundle\Validator\Constraints\UniqueTeamConstraintValidator">
            <argument type="service" id="app.repository.team" />

            <tag name="validator.constraint_validator" alias="unique_team" />
        </service>
    </services>
</container>
