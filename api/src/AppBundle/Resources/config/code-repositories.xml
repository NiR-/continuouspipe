<?xml version="1.0" ?>

<container xmlns="http://symfony.com/schema/dic/services"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <service id="river.code_repository.explorer" class="ContinuousPipe\River\CodeRepository\DelegatesToTheExplorerThatSupportsTheAccountExplorer">
            <argument type="collection">
                <argument type="service" id="river.code_repository.github.explorer" />
                <argument type="service" id="river.code_repository.bitbucket.explorer" />
            </argument>
        </service>

        <service id="river.commit_resolver" class="ContinuousPipe\River\CodeRepository\ImplementationDelegation\CommitResolverDelegator">
            <argument type="collection">
                <argument type="service" id="river.github.commit_resolver" />
                <argument type="service" id="river.bitbucket.commit_resolver" />
            </argument>
        </service>

        <service id="river.file_system_resolver" class="ContinuousPipe\River\CodeRepository\ImplementationDelegation\FileSystemResolverDelegator">
            <argument type="collection">
                <argument type="service" id="river.github.file_system_resolver" />
                <argument type="service" id="river.bitbucket.file_system_resolver" />
            </argument>
        </service>

        <service id="river.listener.eventually_create_and_start_tide" class="ContinuousPipe\River\EventListener\EventuallyCreateAndStartTide">
            <argument type="service" id="command_bus" />
            <argument type="service" id="river.flow.projections.flat_flow_repository" />
        </service>

        <service id="river.listener.locked.eventually_create_and_start_tide"
                 class="ContinuousPipe\River\Tide\Concurrency\EventListener\LockTheStartDecisionOfATide">
            <argument type="service" id="river.listener.eventually_create_and_start_tide" />
            <argument type="service" id="river.tide.concurrency.locker" />

            <tag name="event_subscriber" subscribes_to="ContinuousPipe\River\Event\GitHub\CodePushed"/>
            <tag name="event_subscriber" subscribes_to="ContinuousPipe\River\Event\GitHub\PullRequestOpened"/>
            <tag name="event_subscriber" subscribes_to="ContinuousPipe\River\Event\GitHub\PullRequestSynchronized"/>
            <tag name="event_subscriber" subscribes_to="ContinuousPipe\River\Event\GitHub\PullRequestLabeled"/>

            <tag name="event_subscriber" subscribes_to="ContinuousPipe\River\CodeRepository\BitBucket\Event\CodePushed"/>
        </service>
    </services>
</container>
