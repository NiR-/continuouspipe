<?xml version="1.0" ?>

<container xmlns="http://symfony.com/schema/dic/services"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <service id="river.log_stream.archive_logs.handler.archive_flow_logs_handler" class="ContinuousPipe\River\LogStream\ArchiveLogs\Handler\ArchiveFlowLogsHandler">
            <argument type="service" id="river.view.tide_repository" />
            <argument type="service" id="river.event_store" />
            <argument type="service" id="command_bus" />

            <tag name="asynchronous_command_handler" handles="ContinuousPipe\River\LogStream\ArchiveLogs\Command\ArchiveFlowLogsCommand" />
        </service>

        <service id="river.log_stream.archive_logs.handler.archive_tide_handler" class="ContinuousPipe\River\LogStream\ArchiveLogs\Handler\ArchiveTideHandler">
            <argument type="service" id="log_stream.client" />
            <argument type="service" id="event_bus" />
            <argument type="service" id="logger" />

            <tag name="asynchronous_command_handler" handles="ContinuousPipe\River\LogStream\ArchiveLogs\Command\ArchiveTideCommand" />
        </service>

        <service id="river.log_stream.archive_logs.event_listener.tide_finished.delay_archive_logs" class="ContinuousPipe\River\LogStream\ArchiveLogs\EventListener\TideFinished\DelayArchiveLogs">
            <argument type="service" id="river.queue.delayed_command_bus" />
            <argument type="service" id="river.view.tide_repository" />
            <argument>%tide_archive_delay%</argument>

            <tag name="event_subscriber" subscribes_to="ContinuousPipe\River\Event\TideFailed" />
            <tag name="event_subscriber" subscribes_to="ContinuousPipe\River\Event\TideSuccessful" />
        </service>
    </services>
</container>
