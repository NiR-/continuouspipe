<?xml version="1.0" ?>

<container xmlns="http://symfony.com/schema/dic/services"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <!-- ContinuousPipe to Kubernetes transformer -->
        <service id="kubernetes.naming_strategy.identifier" class="ContinuousPipe\Adapter\Kubernetes\Naming\IdentifierNamingStrategy" />
        <service id="kubernetes.transformer.volume" class="ContinuousPipe\Adapter\Kubernetes\Transformer\VolumeTransformer" />
        <service id="kubernetes.transformer.pod" class="ContinuousPipe\Adapter\Kubernetes\Transformer\PodTransformer">
            <argument type="service" id="kubernetes.naming_strategy.identifier" />
            <argument type="service" id="kubernetes.transformer.volume" />
        </service>
        <service id="kubernetes.transformer.service" class="ContinuousPipe\Adapter\Kubernetes\Transformer\ServiceTransformer">
            <argument type="service" id="kubernetes.naming_strategy.identifier" />
            <argument type="service" id="event_dispatcher" />
        </service>
        <service id="kubernetes.transformer.replication_controller_factory" class="ContinuousPipe\Adapter\Kubernetes\Transformer\ReplicationControllerFactory" />
        <service id="kubernetes.transformer.ingress_factory" class="ContinuousPipe\Adapter\Kubernetes\PublicEndpoint\Ingress\Factory\IngressFactory">
            <argument type="service" id="kubernetes.naming_strategy.identifier" />
        </service>
        <service id="kubernetes.transformer.deployment_factory" class="ContinuousPipe\Adapter\Kubernetes\Transformer\DeploymentFactory" />
        <service id="kubernetes.transformer.component" class="ContinuousPipe\Adapter\Kubernetes\Transformer\ComponentTransformer">
            <argument type="service" id="kubernetes.transformer.pod" />
            <argument type="service" id="kubernetes.transformer.service" />
            <argument type="service" id="kubernetes.transformer.replication_controller_factory" />
            <argument type="service" id="kubernetes.transformer.ingress_factory" />
            <argument type="service" id="kubernetes.transformer.deployment_factory" />
        </service>
        <service id="kubernetes.transformer.environment" class="ContinuousPipe\Adapter\Kubernetes\Transformer\EnvironmentTransformer">
            <argument type="service" id="kubernetes.transformer.component" />
        </service>
        <service id="kubernetes.reverse_transformer.component" class="ContinuousPipe\Adapter\Kubernetes\Inspector\ReverseTransformer\ComponentTransformer">
            <argument type="service" id="kubernetes.reverse_transformer.component_public_endpoint_resolver"/>
        </service>

        <service id="kubernetes.reverse_transformer.chained_component_public_endpoint_resolver" class="ContinuousPipe\Adapter\Kubernetes\Inspector\ReverseTransformer\ChainedComponentPublicEndpointResolver">
            <argument type="collection">
                <argument type="service" id="pipe.cloud_flare.component_public_endpoint_resolver"/>
                <argument type="service" id="pipe.httplabs.component_public_endpoint_resolver"/>
                <argument type="service" id="kubernetes.reverse_transformer.ingress.ingress_public_endpoint_resolver" />
                <argument type="service" id="kubernetes.reverse_transformer.default_component_public_endpoint_resolver" />
            </argument>
        </service>
        <service id="kubernetes.reverse_transformer.component_public_endpoint_resolver" alias="kubernetes.reverse_transformer.chained_component_public_endpoint_resolver" />
        <service id="kubernetes.reverse_transformer.ingress.ingress_public_endpoint_resolver" class="ContinuousPipe\Adapter\Kubernetes\PublicEndpoint\Ingress\IngressEndpointResolver" />
        <service id="kubernetes.reverse_transformer.default_component_public_endpoint_resolver" class="ContinuousPipe\Adapter\Kubernetes\Inspector\ReverseTransformer\DefaultComponentPublicEndpointResolver">
            <argument type="service" id="logger" />
        </service>

        <service id="kubernetes.inspector.pod" class="ContinuousPipe\Adapter\Kubernetes\Inspector\PodInspector" />
        <service id="kubernetes.inspector.namespace" class="ContinuousPipe\Adapter\Kubernetes\Inspector\NamespaceInspector">
            <argument type="service" id="kubernetes.reverse_transformer.component" />
        </service>

        <service id="kubernetes.public_endpoint.public_service_voter" class="ContinuousPipe\Adapter\Kubernetes\PublicEndpoint\PublicEndpointObjectVoter" />

        <!-- Kubernetes client -->
        <service id="pipe.adapter.kubernetes.guzzle_client" class="GuzzleHttp\Client">
            <argument type="collection">
                <argument key="verify">false</argument>
            </argument>

            <tag name="csa_guzzle.client" />
        </service>
        <service id="pipe.adapter.kubernetes.jms_serializer.rolling_update_deployment_handler" class="Kubernetes\Client\Serializer\JmsSerializerRollingUpdateDeploymentHandler">
            <tag name="jms_serializer.subscribing_handler" />
        </service>
        <service id="pipe.adapter.kubernetes.client_factory" class="ContinuousPipe\Adapter\Kubernetes\Client\HttpClientFactory">
            <argument type="service" id="jms_serializer" />
            <argument type="service" id="pipe.adapter.kubernetes.guzzle_client" />
            <argument type="service" id="pipe.adapter.kubernetes.fault_tolerance_configurator" />
            <argument type="service" id="logger" />
        </service>
        <service id="pipe.adapter.kubernetes.fault_tolerance_configurator" class="ContinuousPipe\Adapter\Kubernetes\Client\FaultToleranceConfigurator">
        </service>
        <service id="pipe.adapter.kubernetes.environment_client_factory" class="ContinuousPipe\Adapter\Kubernetes\KubernetesEnvironmentClientFactory">
            <argument type="service" id="pipe.adapter.kubernetes.client_factory" />
            <argument type="service" id="kubernetes.inspector.namespace" />
            <argument type="service" id="event_dispatcher" />
            <argument type="service" id="logger" />
        </service>
        <service id="pipe.adapter.kubernetes" class="ContinuousPipe\Adapter\Kubernetes\KubernetesAdapter">
            <argument type="service" id="pipe.adapter.kubernetes.environment_client_factory" />

            <tag name="pipe.adapter" />
        </service>
        <service id="pipe.adapter.kubernetes.deployment_client_factory" class="ContinuousPipe\Adapter\Kubernetes\Client\DeploymentClientFactory">
            <argument type="service" id="pipe.adapter.kubernetes.client_factory" />
        </service>
        <service id="pipe.adapter.kubernetes.service_waiter" class="ContinuousPipe\Adapter\Kubernetes\PublicEndpoint\LoopPublicEndpointWaiter">
            <argument type="service" id="pipe.adapter.kubernetes.deployment_client_factory" />
            <argument type="service" id="log_stream.logger_factory" />
            <argument type="service" id="jms_serializer" />
            <argument>%endpoint.wait.timeout%</argument>
            <argument>%endpoint.wait.interval%</argument>
        </service>
        <service id="pipe.adapter.kubernetes.component.attacher" class="ContinuousPipe\Adapter\Kubernetes\Component\ComponentAttacher">
            <argument type="service" id="pipe.adapter.kubernetes.deployment_client_factory" />
            <argument type="service" id="log_stream.logger_factory" />
            <argument type="service" id="jms_serializer" />
            <argument type="service" id="logger" />
            <argument>%pod.wait.timeout%</argument>
            <argument>%pod.wait.interval%</argument>
        </service>

        <!-- Listeners -->
        <service id="pipe.adapter.kubernetes.primate_images.docker_cfg_file_generator" class="ContinuousPipe\Adapter\Kubernetes\PrivateImages\DockerCfgFileGenerator" />
        <service id="pipe.adapter.kubernetes.private_images.secret_factory" class="ContinuousPipe\Adapter\Kubernetes\PrivateImages\SecretFactory">
            <argument type="service" id="pipe.adapter.kubernetes.primate_images.docker_cfg_file_generator" />
            <argument type="service" id="authenticator.bucket_repository" />
        </service>
        <service id="pipe.adapter.kubernetes.listener.wait_public_services" class="ContinuousPipe\Adapter\Kubernetes\PublicEndpoint\WaitReadiness\EventListener\PublicServicesCreated\WaitPublicServicesEndpoints">
            <argument type="service" id="event_bus" />
            <argument type="service" id="pipe.adapter.kubernetes.service_waiter" />
            <argument type="service" id="log_stream.logger_factory" />
            <argument type="service" id="kubernetes.public_endpoint.public_service_voter"/>

            <tag name="event_subscriber" subscribes_to="ContinuousPipe\Adapter\Kubernetes\Event\PublicServicesCreated" />
        </service>

        <!-- Endpoint integrations -->
        <service id="pipe.adapter.kubernetes.public_endpoint.ingress.use_ingress_rules_as_endpoint" class="ContinuousPipe\Adapter\Kubernetes\PublicEndpoint\Ingress\Transformer\UsesIngressRulesAsEndpoint" />
        <service id="pipe.adapter.kubernetes.service_waiter.transform_endpoints"
                 class="ContinuousPipe\Adapter\Kubernetes\PublicEndpoint\ApplyEndpointTransformationAfterWaiting"
                 decorates="pipe.adapter.kubernetes.service_waiter">
            <argument type="service" id="pipe.adapter.kubernetes.service_waiter.transform_endpoints.inner" />
            <argument type="collection">
                <argument type="service" id="pipe.httplabs.endpoint_transformer" />
                <argument type="service" id="pipe.cloud_flare.endpoint_transformer" />
                <argument type="service" id="pipe.adapter.kubernetes.public_endpoint.ingress.use_ingress_rules_as_endpoint" />
            </argument>
        </service>

        <!-- CloudFlare integration -->
        <service id="pipe.cloud_flare.annotation_manager.service_and_ingress" class="ContinuousPipe\CloudFlare\AnnotationManager\ServiceAndIngressAnnotationManager">
            <argument type="service" id="pipe.adapter.kubernetes.deployment_client_factory" />
        </service>
        <service id="pipe.cloud_flare.annotation_manager" class="ContinuousPipe\CloudFlare\AnnotationManager\ChainAnnotationManager">
            <argument type="collection">
                <argument type="service" id="pipe.cloud_flare.annotation_manager.service_and_ingress" />
            </argument>
        </service>
        <service id="pipe.cloud_flare.endpoint_transformer" class="ContinuousPipe\CloudFlare\CloudFlareEndpointTransformer">
            <argument type="service" id="pipe.cloud_flare.client" />
            <argument type="service" id="log_stream.logger_factory" />
            <argument type="service" id="pipe.adapter.kubernetes.deployment_client_factory" />
            <argument type="service" id="logger" />
            <argument type="service" id="security.encryption.vault" />
            <argument type="service" id="pipe.cloud_flare.annotation_manager" />
        </service>
        <service id="pipe.cloud_flare.before_environment_deletion.delete_records" class="ContinuousPipe\CloudFlare\BeforeEnvironmentDeletion\DeleteCloudFlareRecords">
            <argument type="service" id="logger" />
            <argument type="service" id="pipe.cloud_flare.client" />
            <argument type="service" id="security.encryption.vault" />

            <tag name="kernel.event_subscriber" />
        </service>
        <service id="pipe.cloud_flare.client.api.official_client_factory" class="ContinuousPipe\CloudFlare\OfficialClientCloudFlareClientFactory" />
        <service id="pipe.cloud_flare.client.api" class="ContinuousPipe\CloudFlare\CloudFlareApiClient">
            <argument type="service" id="pipe.cloud_flare.client.api.official_client_factory" />
            <argument type="service" id="logger" />
        </service>
        <service id="pipe.cloud_flare.client" alias="pipe.cloud_flare.client.api" />
        <service id="pipe.cloud_flare.component_public_endpoint_resolver" class="ContinuousPipe\CloudFlare\CloudFlareComponentPublicEndpointResolver">
            <argument type="service" id="logger" />
        </service>

        <!-- HttpLabs integation -->
        <service id="pipe.httplabs.endpoint_transformer" class="ContinuousPipe\HttpLabs\Endpoint\HttpLabsEndpointTransformer">
            <argument type="service" id="pipe.httplabs.client" />
            <argument type="service" id="pipe.adapter.kubernetes.deployment_client_factory" />
            <argument type="service" id="log_stream.logger_factory" />
            <argument type="service" id="logger" />
            <argument type="service" id="security.encryption.vault" />
        </service>
        <service id="pipe.httplabs.http_client.handler" class="GuzzleHttp\HandlerStack">
            <factory class="GuzzleHttp\HandlerStack" method="create" />
        </service>
        <service id="pipe.httplabs.client" class="ContinuousPipe\HttpLabs\Client\HttpLabsGuzzleClient">
            <argument type="service" id="pipe.httplabs.http_client.handler" />
        </service>
        <service id="pipe.httplabs.before_environment_deletion.delete_stack" class="ContinuousPipe\HttpLabs\BeforeEnvironmentDeletion\DeleteHttpLabsStack">
            <argument type="service" id="logger" />
            <argument type="service" id="pipe.httplabs.client" />
            <argument type="service" id="security.encryption.vault" />

            <tag name="kernel.event_subscriber" />
        </service>

        <service id="pipe.httplabs.component_public_endpoint_resolver" class="ContinuousPipe\HttpLabs\HttpLabsComponentPublicEndpointResolver">
            <argument type="service" id="logger" />
        </service>

        <!-- ClusterHealthChecker -->
        <service id="pipe.k8s_health_checker.http.guzzle_client.stack" class="GuzzleHttp\HandlerStack">
            <factory class="GuzzleHttp\HandlerStack" method="create" />
        </service>
        <service id="pipe.k8s_health_checker.http.guzzle_client" class="GuzzleHttp\Client">
            <argument type="collection">
                <argument key="handler" type="service" id="pipe.k8s_health_checker.http.guzzle_client.stack" />
            </argument>
        </service>
        <service id="pipe.k8s_health_checker.http" class="ContinuousPipe\HealthChecker\HttpHealthCheckClient">
            <argument type="service" id="pipe.k8s_health_checker.http.guzzle_client" />
            <argument type="service" id="jms_serializer" />
            <argument>%k8s_health_checker_url%</argument>
        </service>

        <service id="pipe.k8s_health_checker" alias="pipe.k8s_health_checker.http" />

        <!-- Synchronous event listeners -->
        <service id="pipe.adapter.kubernetes.listener.before_creating_component.create_persistent_volume_claim" class="ContinuousPipe\Adapter\Kubernetes\Listener\BeforeCreatingComponent\CreatePersistentVolumeClaim">
            <tag name="kernel.event_subscriber" />
        </service>
        <service id="pipe.adapter.kubernetes.listener.after_creating_component.attach_component" class="ContinuousPipe\Adapter\Kubernetes\Listener\AfterCreatingComponent\AttachComponent">
            <argument type="service" id="pipe.adapter.kubernetes.component.attacher" />

            <tag name="kernel.event_subscriber" />
        </service>
        <service id="pipe.adapter.kubernetes.listener.post_service_transformation.adds_reverse_proxy_annotations" class="ContinuousPipe\Adapter\Kubernetes\Listener\PostServiceTransformation\AddsReverseProxyAnnotation">
            <tag name="kernel.event_subscriber" />
        </service>

        <!-- Object deployer -->
        <service id="pipe.adapter.kubernetes.object_deployer.pod" class="ContinuousPipe\Adapter\Kubernetes\ObjectDeployer\PodObjectDeployer">
            <argument type="service" id="kubernetes.inspector.pod" />
        </service>
        <service id="pipe.adapter.kubernetes.object_deployer.service" class="ContinuousPipe\Adapter\Kubernetes\ObjectDeployer\ServiceObjectDeployer" />
        <service id="pipe.adapter.kubernetes.object_deployer.secret" class="ContinuousPipe\Adapter\Kubernetes\ObjectDeployer\SecretObjectDeployer" />
        <service id="pipe.adapter.kubernetes.object_deployer.ingress" class="ContinuousPipe\Adapter\Kubernetes\ObjectDeployer\IngressObjectDeployer" />
        <service id="pipe.adapter.kubernetes.object_deployer.deployment" class="ContinuousPipe\Adapter\Kubernetes\ObjectDeployer\DeploymentObjectDeployer" />
        <service id="pipe.adapter.kubernetes.object_deployer.replication_controller" class="ContinuousPipe\Adapter\Kubernetes\ObjectDeployer\ReplicationControllerObjectDeployer" />
        <service id="pipe.adapter.kubernetes.object_deployer" class="ContinuousPipe\Adapter\Kubernetes\ObjectDeployer\ChainObjectDeployer">
            <argument type="collection">
                <argument type="service" id="pipe.adapter.kubernetes.object_deployer.pod" />
                <argument type="service" id="pipe.adapter.kubernetes.object_deployer.service" />
                <argument type="service" id="pipe.adapter.kubernetes.object_deployer.secret" />
                <argument type="service" id="pipe.adapter.kubernetes.object_deployer.ingress" />
                <argument type="service" id="pipe.adapter.kubernetes.object_deployer.deployment" />
                <argument type="service" id="pipe.adapter.kubernetes.object_deployer.replication_controller" />
            </argument>
        </service>

        <!-- Handlers -->
        <service id="pipe.adapter.kubernetes.prepare_environment_handler" class="ContinuousPipe\Adapter\Kubernetes\Handler\PrepareEnvironmentHandler">
            <argument type="service" id="pipe.adapter.kubernetes.client_factory" />
            <argument type="service" id="event_bus" />
            <argument type="service" id="log_stream.logger_factory" />
            <argument type="service" id="kubernetes.naming_strategy.identifier" />
            <argument type="service" id="pipe.adapter.kubernetes.private_images.secret_factory" />
            <argument type="service" id="tolerance.waiter" />

            <tag name="deployment_command_handler" handles="ContinuousPipe\Pipe\Command\PrepareEnvironmentCommand" />
        </service>
        <service id="pipe.adapter.kubernetes.create_public_endpoints" class="ContinuousPipe\Adapter\Kubernetes\Handler\CreatePublicEndpointsHandler">
            <argument type="service" id="kubernetes.transformer.environment" />
            <argument type="service" id="pipe.adapter.kubernetes.deployment_client_factory" />
            <argument type="service" id="event_bus" />
            <argument type="service" id="log_stream.logger_factory" />
            <argument type="service" id="kubernetes.public_endpoint.public_service_voter" />
            <argument type="service" id="pipe.adapter.kubernetes.object_deployer" />

            <tag name="deployment_command_handler" handles="ContinuousPipe\Pipe\Command\CreatePublicEndpointsCommand" />
        </service>
        <service id="pipe.adapter.kubernetes.create_components_handler" class="ContinuousPipe\Adapter\Kubernetes\Handler\CreateComponentsHandler">
            <argument type="service" id="kubernetes.transformer.component" />
            <argument type="service" id="pipe.adapter.kubernetes.deployment_client_factory" />
            <argument type="service" id="event_bus" />
            <argument type="service" id="log_stream.logger_factory" />
            <argument type="service" id="kubernetes.public_endpoint.public_service_voter" />
            <argument type="service" id="event_dispatcher" />
            <argument type="service" id="pipe.adapter.kubernetes.object_deployer" />

            <tag name="deployment_command_handler" handles="ContinuousPipe\Pipe\Command\CreateComponentsCommand" />
        </service>

        <service id="pipe.adapter.kubernetes.rollback_deployment_handler" class="ContinuousPipe\Adapter\Kubernetes\Handler\RollbackDeploymentHandler">
            <argument type="service" id="pipe.event_store" />
            <argument type="service" id="pipe.adapter.kubernetes.deployment_client_factory" />

            <tag name="deployment_command_handler" handles="ContinuousPipe\Pipe\Command\RollbackDeploymentCommand" />
        </service>

        <service id="pipe.adapter.kubernetes.wait_components_handler" class="ContinuousPipe\Adapter\Kubernetes\Handler\WaitComponentsHandler">
            <argument type="service" id="pipe.adapter.kubernetes.deployment_client_factory" />
            <argument type="service" id="event_bus" />
            <argument type="service" id="log_stream.logger_factory" />
            <argument type="service" id="logger" />
            <argument type="service" id="kubernetes.inspector.pod" />
            <argument>%pipe.wait_component_interval%</argument>
            <argument>%pipe.wait_component_timeout%</argument>

            <tag name="deployment_command_handler" handles="ContinuousPipe\Pipe\Command\WaitComponentsCommand" />
        </service>
    </services>
</container>
