<?xml version="1.0" ?>

<container xmlns="http://symfony.com/schema/dic/services"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <service id="river.listener.code_pushed.branch_view" class="ContinuousPipe\River\View\EventListener\CodePushedBranchView">
            <argument type="service" id="river.branch.view.storage" />

            <tag name="event_subscriber" subscribes_to="ContinuousPipe\River\CodeRepository\Event\CodePushed" />
        </service>

        <service id="river.listener.code_pushed.pull_request_view" class="ContinuousPipe\River\View\EventListener\CodePushedPullRequestView">
            <argument type="service" id="river.branch.pull_request.view.storage" />

            <tag name="event_subscriber" subscribes_to="ContinuousPipe\River\CodeRepository\Event\CodePushed" />
        </service>

        <service id="river.listener.branch_deleted.branch_view" class="ContinuousPipe\River\View\EventListener\BranchDeletedBranchView">
            <argument type="service" id="river.branch.view.storage" />

            <tag name="event_subscriber" subscribes_to="ContinuousPipe\River\CodeRepository\Event\BranchDeleted" />
        </service>

        <service id="river.listener.branch_pinned.branch_view" class="ContinuousPipe\River\View\EventListener\BranchPinnedView">
            <argument type="service" id="river.branch.view.storage" />

            <tag name="event_subscriber" subscribes_to="ContinuousPipe\River\Flow\Event\BranchPinned" />
        </service>

        <service id="river.listener.branch_unpinned.branch_view" class="ContinuousPipe\River\View\EventListener\BranchUnpinnedView">
            <argument type="service" id="river.branch.view.storage" />

            <tag name="event_subscriber" subscribes_to="ContinuousPipe\River\Flow\Event\BranchUnpinned" />
        </service>

        <service id="river.listener.pull_request_open.pull_request_view" class="ContinuousPipe\River\View\EventListener\PullRequestOpenedView">
            <argument type="service" id="river.branch.pull_request.view.storage" />

            <tag name="event_subscriber" subscribes_to="ContinuousPipe\River\CodeRepository\Event\PullRequestOpened" />
        </service>

        <service id="river.listener.pull_request_closed.pull_request_view" class="ContinuousPipe\River\View\EventListener\PullRequestClosedPullRequestView">
            <argument type="service" id="river.branch.pull_request.view.storage" />

            <tag name="event_subscriber" subscribes_to="ContinuousPipe\River\Event\GitHub\PullRequestClosed" />
        </service>

        <service id="river.listener.branch_deleted.pull_request_view" class="ContinuousPipe\River\View\EventListener\BranchDeletedPullRequestView">
            <argument type="service" id="river.branch.pull_request.view.storage" />

            <tag name="event_subscriber" subscribes_to="ContinuousPipe\River\CodeRepository\Event\BranchDeleted" />
        </service>

        <service id="river.listener.tide_event.branch_view" class="ContinuousPipe\River\View\EventListener\TideEventBranchView">
            <argument type="service" id="river.branch.view.storage" />
            <argument type="service" id="river.view.tide_view_factory" />

            <tag name="event_subscriber" subscribes_to="ContinuousPipe\River\Event\TideCreated" />
            <tag name="event_subscriber" subscribes_to="ContinuousPipe\River\Event\TideStarted" />
            <tag name="event_subscriber" subscribes_to="ContinuousPipe\River\Event\TideCancelled" />
            <tag name="event_subscriber" subscribes_to="ContinuousPipe\River\Event\TideFailed" />
            <tag name="event_subscriber" subscribes_to="ContinuousPipe\River\Event\TideSuccessful" />
        </service>

        <service id="river.branch.view.storage" class="ContinuousPipe\River\Infrastructure\Firebase\Branch\View\Storage\FirebaseBranchViewStorage">
            <argument type="service" id="river.view.storage.firebase_client" />
            <argument>%firebase_database_uri%</argument>
            <argument type="service" id="logger" />
            <argument type="service" id="river.code_repository.branch_query" />
            <argument type="service" id="river.flow.projections.flat_flow_repository" />
            <argument type="service" id="river.branch.view.branch_normalizer" />

            <tag name="tolerance.operation_wrapper"
                 methods="save,updateTide,branchPinned,branchUnpinned"
                 runner="tolerance.operation_runners.firebase" />

        </service>

        <service id="river.branch.pull_request.view.storage" class="ContinuousPipe\River\Infrastructure\Firebase\Branch\View\Storage\FirebasePullRequestViewStorage">
            <argument type="service" id="river.view.storage.firebase_client" />
            <argument>%firebase_database_uri%</argument>
            <argument type="service" id="logger" />
            <argument type="service" id="river.pull_request_resolver" />
            <argument type="service" id="river.branch.view.pull_request_normalizer" />

            <tag name="tolerance.operation_wrapper"
                 methods="save,add,deletePullRequest,deleteBranch"
                 runner="tolerance.operation_runners.firebase" />

        </service>

        <service id="river.code_repository.pinned_branches_query"
                 class="ContinuousPipe\River\CodeRepository\PinnedBranchQuery"
                 decorates="river.code_repository.branch_query"
                 decoration-priority="1">
            <argument type="service" id="river.code_repository.pinned_branches_query.inner"/>
        </service>

        <service id="river.code_repository.branch_with_tides_query"
                 class="ContinuousPipe\River\CodeRepository\BranchWithTidesQuery"
                 decorates="river.code_repository.branch_query"
                 decoration-priority="2">
            <argument type="service" id="river.code_repository.branch_with_tides_query.inner"/>
            <argument type="service" id="river.view.tide_repository"/>
        </service>

        <service id="river.code_repository.branch_query" class="ContinuousPipe\River\CodeRepository\RepositoryBranchQuery">
            <argument type="collection">
                <argument key="ContinuousPipe\River\CodeRepository\GitHub\GitHubCodeRepository" type="service" id="river.code_repository.branch_query.github"/>
                <argument key="ContinuousPipe\River\CodeRepository\BitBucket\BitBucketCodeRepository" type="service" id="river.code_repository.branch_query.bitbucket"/>
            </argument>
        </service>

        <service id="river.code_repository.branch_query.github" class="GitHub\Integration\ApiBranchQuery">
            <argument type="service" id="river.github.guzzle_http_client" />
            <argument type="service" id="github.integration.installation_repository" />
            <argument type="service" id="github.integration.installation_token_resolver" />
            <argument type="service" id="logger" />
        </service>

        <service id="river.code_repository.branch_query.bitbucket" class="ContinuousPipe\River\CodeRepository\BitBucket\ApiBranchQuery">
            <argument type="service" id="river.bitbucket.client_factory"/>
        </service>

        <service id="river.branch.view.branch_normalizer" class="ContinuousPipe\River\Infrastructure\Firebase\Branch\View\Storage\BranchNormalizer">
            <argument type="service" id="jms_serializer"/>
        </service>

        <service id="river.branch.view.pull_request_normalizer" class="ContinuousPipe\River\Infrastructure\Firebase\Branch\View\Storage\PullRequestNormalizer"/>

    </services>
</container>
