<?xml version="1.0" ?>

<container xmlns="http://symfony.com/schema/dic/services"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <service id="river.time_resolver" class="ContinuousPipe\River\Infrastructure\InMemory\NativeTimeResolver" />
        <service id="river.tide.saga.apply_tide_events" class="ContinuousPipe\River\ApplyTideEvents">
            <argument type="service" id="event_bus" />
            <argument type="service" id="river.repository.tide" />
        </service>
        <service id="river.tide.saga" alias="river.tide.saga.apply_tide_events" />

        <service id="river.event_bus.middleware.tide_saga_apply" class="ContinuousPipe\River\EventBus\TideSagaApplyMiddleware">
            <argument type="service" id="service_container" />

            <tag name="event_bus_middleware" priority="0" />
        </service>

        <service id="river.repository.tide" class="ContinuousPipe\River\Repository\EventBusTideRepository">
            <argument type="service" id="river.event_store" />
            <argument type="service" id="river.tide_factory" />
        </service>

        <service id="river.tide_summary_creator" class="ContinuousPipe\River\Tide\TideSummaryCreator">
            <argument type="service" id="river.event_store" />
            <argument type="service" id="river.repository.tide" />
        </service>

        <service id="river.tide.configuration_enhancer.unnamed_tasks" class="ContinuousPipe\River\Flow\ConfigurationEnhancer\TaskListAsUnnamedArrayEnhancer" />
        <service id="river.tide.configuration_enhancer.add_default_build_tag" class="ContinuousPipe\River\Flow\ConfigurationEnhancer\AddDefaultBuildTag" />
        <service id="river.tide.configuration_enhancer.deploy_built_images" class="ContinuousPipe\River\Flow\ConfigurationEnhancer\DeployBuiltImagesByDefault" />
        <service id="river.tide.configuration_enhancer.add_default_values" class="ContinuousPipe\River\Flow\ConfigurationEnhancer\AddDefaultValues" />
        <service id="river.tide.configuration_enhancer.run.get_images_name_from_built_services" class="ContinuousPipe\River\Flow\ConfigurationEnhancer\GetImageNameFromBuiltServices">
            <argument type="collection">
                <argument type="string" key="selector">[tasks][*][run]</argument>
                <argument type="string" key="servicePath">[image][from_service]</argument>
                <argument type="string" key="namePath">[image][name]</argument>
            </argument>
        </service>
        <service id="river.tide.configuration_enhancer.deploy.get_images_name_from_built_services" class="ContinuousPipe\River\Flow\ConfigurationEnhancer\GetImageNameFromBuiltServices">
            <argument type="collection">
                <argument type="string" key="selector">[tasks][*][deploy][services][*]</argument>
                <argument type="string" key="servicePath">[specification][source][from_service]</argument>
                <argument type="string" key="namePath">[specification][source][image]</argument>
                <argument type="string" key="tagPath">[specification][source][tag]</argument>
            </argument>
        </service>

        <service id="river.tide_configuration_factory" class="ContinuousPipe\River\Flow\ConfigurationFactory">
            <argument type="service" id="river.file_system_resolver" />
            <argument type="service" id="river.task_factory_registry" />
            <argument type="collection">
                <argument type="service" id="river.tide.configuration_enhancer.unnamed_tasks" />
                <argument type="service" id="river.docker_compose.configuration_enhancer" />
                <argument type="service" id="river.tide.configuration_enhancer.add_default_build_tag" />
                <argument type="service" id="river.tide.configuration_enhancer.deploy_built_images" />
                <argument type="service" id="river.tide.configuration_enhancer.add_default_values" />
                <argument type="service" id="river.tide.configuration_enhancer.run.get_images_name_from_built_services" />
                <argument type="service" id="river.tide.configuration_enhancer.deploy.get_images_name_from_built_services" />
            </argument>
        </service>

        <service id="river.tide.configuration_factory.merge_environment_variables"
                 class="ContinuousPipe\River\Flow\ConfigurationFinalizer\MergeEnvironmentVariables"
                 decorates="river.tide_configuration_factory">
            <argument type="service" id="river.tide.configuration_factory.merge_environment_variables.inner" />
            <argument type="collection">
                <argument>[environment_variables]</argument>
                <argument>[tasks][*][deploy][services][*][specification][environment_variables]</argument>
            </argument>
        </service>

        <service id="river.tide.configuration_finalizer.replace_environ_values"
                 class="ContinuousPipe\River\Flow\ConfigurationFinalizer\ReplaceEnvironmentVariableValues"
                 decorates="river.tide_configuration_factory">
            <argument type="service" id="river.tide.configuration_finalizer.replace_environ_values.inner" />
        </service>

        <service id="river.task_filter.context_factory" class="ContinuousPipe\River\Filter\ContextFactory">
            <argument type="service" id="river.github.client_factory" />
            <argument type="service" id="logger" />
            <argument type="service" id="river.github.pull_request_resolver" />
        </service>

        <service id="river.tide.task_runner" class="ContinuousPipe\River\Task\StartTaskRunner" />
        <service id="river.task_filter.expression_language_filter_evaluator" class="ContinuousPipe\River\Filter\ExpressionLanguageFilterEvaluator">
            <argument type="service" id="river.task_filter.context_factory" />
        </service>
        <service id="river.tide.task_runner.filter_tasks"
                 class="ContinuousPipe\River\Filter\TaskRunner\FilterDecorator"
                 decorates="river.tide.task_runner">
            <argument type="service" id="river.tide.task_runner.filter_tasks.inner" />
            <argument type="service" id="river.task_filter.expression_language_filter_evaluator" />
            <argument type="service" id="event_bus" />
            <argument type="service" id="logger" />
        </service>
        <service id="river.tide_factory" class="ContinuousPipe\River\TideFactory">
            <argument type="service" id="log_stream.logger_factory" />
            <argument type="service" id="river.task_factory_registry" />
            <argument type="service" id="river.repository.flow" />
            <argument type="service" id="river.tide_configuration_factory" />
            <argument type="service" id="river.commit_resolver" />
            <argument type="service" id="river.tide.task_runner" />
        </service>

        <service id="river.view.tide_repository" class="ContinuousPipe\River\Infrastructure\Doctrine\Repository\View\DoctrineTideRepository">
            <argument type="service" id="doctrine.orm.entity_manager" />
            <argument type="service" id="river.repository.flow" />
        </service>

        <service id="river.view.listener.tide_created" class="ContinuousPipe\River\View\EventListener\TideCreatedListener">
            <argument type="service" id="river.view.tide_repository" />
            <argument type="service" id="river.repository.flow" />
            <argument type="service" id="river.time_resolver" />

            <tag name="event_subscriber" subscribes_to="ContinuousPipe\River\Event\TideCreated"/>
        </service>

        <service id="river.view.listener.tide_status" class="ContinuousPipe\River\View\EventListener\TideStatusListener">
            <argument type="service" id="river.view.tide_repository" />
            <argument type="service" id="river.time_resolver" />

            <tag name="event_subscriber" subscribes_to="ContinuousPipe\River\Event\TideSuccessful"/>
            <tag name="event_subscriber" subscribes_to="ContinuousPipe\River\Event\TideStarted"/>
            <tag name="event_subscriber" subscribes_to="ContinuousPipe\River\Event\TideFailed"/>
        </service>

        <!-- Concurrency -->
        <service id="river.tide.concurrency_manager" class="ContinuousPipe\River\Tide\Concurrency\ViewRepositoryBasedConcurrencyManager">
            <argument type="service" id="river.view.tide_repository" />
            <argument type="service" id="river.queue.delayed_command_bus" />
        </service>

        <service id="river.tide.concurrency.run_pending_tides_handler" class="ContinuousPipe\River\Tide\Concurrency\Handler\RunPendingTidesHandler">
            <argument type="service" id="river.view.tide_repository" />
            <argument type="service" id="river.tide.concurrency_manager" />
            <argument type="service" id="command_bus" />

            <tag name="asynchronous_command_handler" handles="ContinuousPipe\River\Tide\Concurrency\Command\RunPendingTidesCommand" />
        </service>

        <service id="river.tide.concurrency.run_pending_when_tide_is_finished" class="ContinuousPipe\River\Tide\Concurrency\EventListener\RunPendingTidesWhenATideIsFinished">
            <argument type="service" id="river.view.tide_repository"/>
            <argument type="service" id="command_bus" />

            <tag name="event_subscriber" subscribes_to="ContinuousPipe\River\Event\TideSuccessful"/>
            <tag name="event_subscriber" subscribes_to="ContinuousPipe\River\Event\TideFailed"/>
        </service>

        <service id="river.tide.concurrency.locker.predis_client" class="Predis\Client">
            <argument>redis://%redis_host%</argument>
        </service>
        <service id="river.tide.concurrency.locker.predis_locker" class="ContinuousPipe\River\Tide\Concurrency\Lock\PredisMutexLocker">
            <argument type="service" id="river.tide.concurrency.locker.predis_client" />
            <argument>%locker_timeout%</argument>
        </service>
        <service id="river.tide.concurrency.locker" alias="river.tide.concurrency.locker.predis_locker" />
        <service id="river.tide.concurrency.lock_tide_while_saga"
                 class="ContinuousPipe\River\Tide\Concurrency\Saga\LockTideWhileSaga"
                 decorates="river.tide.saga">
            <argument type="service" id="river.tide.concurrency.lock_tide_while_saga.inner" />
            <argument type="service" id="river.tide.concurrency.locker" />
        </service>

        <!-- Filters -->
        <service id="river.tide.filter.filter_hash_repository" class="ContinuousPipe\River\Infrastructure\Doctrine\Repository\FilterHash\DoctrineFilterHashRepository">
            <argument type="service" id="doctrine.orm.entity_manager"/>
        </service>
        <service id="river.tide.filter.filter_hash_evaluator" class="ContinuousPipe\River\Filter\FilterHash\FilterHashEvaluator">
            <argument type="service" id="river.task_filter.expression_language_filter_evaluator" />
        </service>
        <service id="river.tide.filter.filter_hash.tide_created.store_filter_hash" class="ContinuousPipe\River\Filter\FilterHash\EventListener\TideCreated\StoreFilterHash">
            <argument type="service" id="river.repository.tide"/>
            <argument type="service" id="river.tide.filter.filter_hash_repository"/>
            <argument type="service" id="river.tide.filter.filter_hash_evaluator"/>

            <tag name="event_subscriber" subscribes_to="ContinuousPipe\River\Event\TideCreated" />
        </service>

        <!-- Tide start voters -->
        <service id="river.tide.start_voter.filter_configuration" class="ContinuousPipe\River\Tide\StartVoter\FilterConfigurationVoter" />
        <service id="river.tide.start_voter.filter_hash_changed" class="ContinuousPipe\River\Tide\StartVoter\FilterHashChangedVoter">
            <argument type="service" id="river.tide.filter.filter_hash_evaluator"/>
            <argument type="service" id="river.view.tide_repository"/>
            <argument type="service" id="river.tide.filter.filter_hash_repository"/>
        </service>
        <service id="river.tide.start_voter.tide_already_created" class="ContinuousPipe\River\Tide\StartVoter\TideAlreadyCreatedVoter">
            <argument type="service" id="river.view.tide_repository" />
        </service>

        <service id="river.tide.start_voter.context" class="ContinuousPipe\River\Tide\StartVoter\AffirmativeVoter">
            <argument type="collection">
                <argument type="service" id="river.tide.start_voter.tide_already_created" />
                <argument type="service" id="river.tide.start_voter.filter_hash_changed" />
            </argument>
        </service>
        <service id="river.tide.start_voter" class="ContinuousPipe\River\Tide\StartVoter\UnanimousVoter">
            <argument type="collection">
                <argument type="service" id="river.tide.start_voter.filter_configuration" />
                <argument type="service" id="river.tide.start_voter.context" />
            </argument>
        </service>

        <!-- External relations -->
        <service id="river.tide.external_relations.resolver" class="ContinuousPipe\River\Tide\ExternalRelation\GitHub\PullRequestResolver">
            <argument type="service" id="river.github.pull_request_resolver" />
            <argument type="service" id="river.view.tide_repository" />
        </service>

        <service id="river.tide.view.list_pagination" class="ContinuousPipe\River\View\Pagination\TideListPaginatorSubscriber">
            <tag name="knp_paginator.subscriber" />
        </service>
    </services>
</container>
