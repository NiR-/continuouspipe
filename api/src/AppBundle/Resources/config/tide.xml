<?xml version="1.0" ?>

<container xmlns="http://symfony.com/schema/dic/services"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <service id="river.tide.saga" class="ContinuousPipe\River\TideSaga">
            <argument type="service" id="event_bus" />
            <argument type="service" id="river.repository.tide" />
        </service>

        <service id="river.event_bus.middleware.tide_saga_apply" class="ContinuousPipe\River\EventBus\TideSagaApplyMiddleware">
            <argument type="service" id="river.tide.saga" />

            <tag name="event_bus_middleware" priority="0" />
        </service>

        <service id="river.repository.tide" class="ContinuousPipe\River\Repository\EventBusTideRepository">
            <argument type="service" id="river.event_store" />
            <argument type="service" id="river.tide_factory" />
        </service>
        <service id="river.tide_configuration_factory" class="ContinuousPipe\River\TideConfigurationFactory">
            <argument type="service" id="river.file_system_resolver" />
            <argument type="service" id="river.task_factory_registry" />
        </service>
        <service id="river.tide_factory" class="ContinuousPipe\River\TideFactory">
            <argument type="service" id="log_stream.logger_factory" />
            <argument type="service" id="river.task_factory_registry" />
            <argument type="service" id="river.repository.flow" />
            <argument type="service" id="river.tide_configuration_factory" />
            <argument type="service" id="event_bus" />
        </service>

        <service id="river.view.tide_repository" class="ContinuousPipe\River\Infrastructure\Doctrine\Repository\View\DoctrineTideRepository">
            <argument type="service" id="doctrine.orm.entity_manager" />
            <argument type="service" id="river.repository.flow" />
        </service>

        <service id="river.view.listener.tide_created" class="ContinuousPipe\River\View\EventListener\TideCreatedListener">
            <argument type="service" id="river.view.tide_repository" />
            <argument type="service" id="river.repository.flow" />

            <tag name="event_subscriber" subscribes_to="ContinuousPipe\River\Event\TideCreated"/>
        </service>

        <service id="river.view.listener.tide_status" class="ContinuousPipe\River\View\EventListener\TideStatusListener">
            <argument type="service" id="river.view.tide_repository" />

            <tag name="event_subscriber" subscribes_to="ContinuousPipe\River\Event\TideSuccessful"/>
            <tag name="event_subscriber" subscribes_to="ContinuousPipe\River\Event\TideStarted"/>
            <tag name="event_subscriber" subscribes_to="ContinuousPipe\River\Event\TideFailed"/>
        </service>
    </services>
</container>
