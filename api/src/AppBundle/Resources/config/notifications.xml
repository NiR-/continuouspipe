<?xml version="1.0" ?>

<container xmlns="http://symfony.com/schema/dic/services"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <service id="river.notifications.status_factory" class="ContinuousPipe\River\Notifications\StatusFactory">
            <argument type="service" id="river.time_resolver" />
            <argument type="service" id="logger" />
            <argument type="service" id="river.tide_event_store" />
            <argument>%river_ui_url%</argument>
        </service>

        <service id="river.notifications.chain_notifier" class="ContinuousPipe\River\Notifications\ChainNotifier">
            <argument type="collection">
                <argument type="service" id="river.notifications.notifier.slack" />
                <argument type="service" id="river.notifications.notifier.github.commit_status" />
                <argument type="service" id="river.notifications.notifier.github.pull_request" />
            </argument>
        </service>

        <service id="river.notifications.notifier" class="ContinuousPipe\River\Notifications\FilterNotificationBasedOnWhen">
            <argument type="service" id="river.notifications.chain_notifier" />
        </service>

        <service id="river.notifications.tide_listener" class="ContinuousPipe\River\Notifications\TideStatusListener">
            <argument type="service" id="river.view.tide_repository" />
            <argument type="service" id="river.notifications.status_factory"/>
            <argument type="service" id="log_stream.logger_factory"/>
            <argument type="service" id="river.notifications.notifier"/>
            <argument type="service" id="logger" />

            <tag name="event_subscriber" subscribes_to="ContinuousPipe\River\Event\TideStarted"/>
            <tag name="event_subscriber" subscribes_to="ContinuousPipe\River\Event\TideSuccessful"/>
            <tag name="event_subscriber" subscribes_to="ContinuousPipe\River\Event\TideFailed"/>
            <tag name="event_subscriber" subscribes_to="ContinuousPipe\River\Event\TideCreated"/>
        </service>

        <!-- Slack -->
        <service id="slack.http_client" class="GuzzleHttp\Client">
            <tag name="csa_guzzle.client" />
        </service>
        <service id="river.notifications.notifier.slack.http_notifier" class="ContinuousPipe\River\Notifications\Slack\HttpSlackNotifier">
            <argument type="service" id="slack.http_client" />
            <argument type="service" id="river.pipe.public_endpoint_writer" />

            <tag name="tolerance.operation_wrapper"
                 methods="notify"
                 runner="tolerance.operation_runners.slack" />
        </service>
        <service id="river.notifications.notifier.slack" alias="river.notifications.notifier.slack.http_notifier" />

        <!-- GitHub Commit Status -->
        <service id="river.notifications.notifier.github.commit_status.http" class="ContinuousPipe\River\Notifications\GitHub\CommitStatus\GitHubCommitStatusNotifier">
            <argument type="service" id="river.github.client_factory" />
        </service>
        <service id="river.notifications.notifier.github.commit_status" alias="river.notifications.notifier.github.commit_status.http" />

        <!-- GitHub Pull Request -->
        <service id="river.notifications.notifier.github.pull_request" class="ContinuousPipe\River\Notifications\GitHub\PullRequest\GitHubPullRequestStatusNotifier">
            <argument type="service" id="river.github.pull_request_resolver" />
            <argument type="service" id="river.github.client_factory" />
            <argument type="service" id="river.tide_event_store" />
            <argument type="service" id="river.view.tide_repository" />
            <argument type="service" id="river.pipe.public_endpoint_writer" />
        </service>
    </services>
</container>
