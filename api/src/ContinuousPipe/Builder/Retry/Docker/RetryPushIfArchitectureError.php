<?php

namespace ContinuousPipe\Builder\Retry\Docker;

use ContinuousPipe\Builder\Build;
use ContinuousPipe\Builder\Builder;
use ContinuousPipe\Builder\BuildException;
use ContinuousPipe\Builder\Docker\Exception\DaemonNetworkException;
use ContinuousPipe\Builder\Docker\Exception\PushAlreadyInProgress;
use LogStream\Logger;
use LogStream\Node\Text;

class RetryPushIfArchitectureError implements Builder
{
    /**
     * Max retry count.
     */
    const MAX_RETRIES = 3;

    /**
     * Delay between retries, in seconds.
     *
     * @var int
     */
    const DELAY_BETWEEN_RETRIES = 5;

    /**
     * @var Builder
     */
    private $builder;

    /**
     * @param Builder $builder
     */
    public function __construct(Builder $builder)
    {
        $this->builder = $builder;
    }

    /**
     * {@inheritdoc}
     */
    public function build(Build $build, Logger $logger)
    {
        return $this->builder->build($build, $logger);
    }

    /**
     * Push the image generated by this build.
     *
     * @param Build  $build
     * @param Logger $logger
     *
     * @throws BuildException
     */
    public function push(Build $build, Logger $logger)
    {
        $attempts = 0;

        do {
            try {
                return $this->builder->push($build, $logger);
            } catch (BuildException $e) {
                $shouldRetry = $this->shouldRetryBasedOnException($e);
            }

            $retryIn = self::DELAY_BETWEEN_RETRIES * $attempts;
            $logger->append(new Text(sprintf(
                'Detected infrastructure error, retrying in %s seconds',
                $retryIn
            )));

            sleep($retryIn);
        } while ($shouldRetry && ++$attempts <= self::MAX_RETRIES);

        throw new BuildException('Push failed event after retries', $e->getCode(), $e);
    }

    /**
     * @param BuildException $e
     *
     * @return bool
     */
    private function shouldRetryBasedOnException(BuildException $e)
    {
        $dockerException = $e->getPrevious();

        if ($dockerException instanceof PushAlreadyInProgress) {
            return true;
        } elseif ($dockerException instanceof DaemonNetworkException) {
            return true;
        }

        return false;
    }
}
